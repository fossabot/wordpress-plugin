{
    "root": true,
    "parser": "babel-eslint",
    "extends": [
        "wordpress",
        "plugin:react/recommended",
        "plugin:jsx-a11y/recommended",
        "plugin:jest/recommended",
        "prettier"
    ],
    "env": {
        "browser": false,
        "es6": true,
        "node": true,
        "mocha": true,
        "jest/globals": true
    },
    "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    "globals": {
        "wp": true,
        "wpApiSettings": true,
        "window": true,
        "document": true,
        "namespace": true
    },
    "plugins": ["react", "jsx-a11y", "jest"],
    "settings": {
        "react": {
            "pragma": "wp"
        }
    },
    "rules": {
        "camelcase": ["error", { "properties": "never" }],
        "constructor-super": "warn",
        "dot-notation": "error",
        "eqeqeq": ["error", "always"],
        "jsx-a11y/label-has-for": [
            "error",
            {
                "required": "id"
            }
        ],
        "jsx-a11y/media-has-caption": "off",
        "jsx-a11y/no-noninteractive-tabindex": "off",
        "jsx-a11y/role-has-required-aria-props": "off",
        "lines-around-comment": "off",
        "no-alert": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-console": "error",
        "no-const-assign": "warn",
        "no-debugger": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-duplicate-imports": "error",
        "no-else-return": "error",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-lonely-if": "error",
        "no-mixed-operators": "error",
        "no-multi-str": "off",
        "no-negated-in-lhs": "error",
        "no-nested-ternary": "error",
        "no-param-reassign": ["error", { "props": false }],
        "no-redeclare": "error",
        "no-restricted-globals": "error",
        "no-restricted-syntax": [
            "error",
            {
                "selector": "ImportDeclaration[source.value=/^@wordpress\\u002F.+\\u002F/]",
                "message": "Path access on WordPress dependencies is not allowed."
            },
            {
                "selector": "ImportDeclaration[source.value=/^blocks$/]",
                "message": "Use @wordpress/blocks as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^components$/]",
                "message": "Use @wordpress/components as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^date$/]",
                "message": "Use @wordpress/date as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^editor$/]",
                "message": "Use @wordpress/editor as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^element$/]",
                "message": "Use @wordpress/element as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^i18n$/]",
                "message": "Use @wordpress/i18n as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^data$/]",
                "message": "Use @wordpress/data as import path instead."
            },
            {
                "selector": "ImportDeclaration[source.value=/^utils$/]",
                "message": "Use @wordpress/utils as import path instead."
            },
            {
                "selector": "CallExpression[callee.name=/^__|_n|_x$/]:not([arguments.0.type=/^Literal|BinaryExpression$/])",
                "message": "Translate function arguments must be string literals."
            },
            {
                "selector": "CallExpression[callee.name=/^_n|_x$/]:not([arguments.1.type=/^Literal|BinaryExpression$/])",
                "message": "Translate function arguments must be string literals."
            },
            {
                "selector": "CallExpression[callee.name=_nx]:not([arguments.2.type=/^Literal|BinaryExpression$/])",
                "message": "Translate function arguments must be string literals."
            }
        ],
        "no-shadow": "off",
        "no-this-before-super": "warn",
        "no-undef": "warn",
        "no-undef-init": "error",
        "no-unreachable": "warn",
        "no-unsafe-negation": "error",
        "no-unused-expressions": "error",
        "no-unused-vars": "warn",
        "no-useless-computed-key": "error",
        "no-useless-constructor": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "one-var": ["error", "never"],
        "prefer-const": "error",
        "quotes": ["error", "single", "avoid-escape"],
        "react/display-name": "off",
        "react/jsx-key": "error",
        "react/no-children-prop": "off",
        "react/no-find-dom-node": "warn",
        "react/prop-types": "off",
        "spaced-comment": ["error", "always"],
        "valid-jsdoc": ["error", { "requireReturn": false }],
        "valid-typeof": "warn",
        "yoda": "off"
    }
}
